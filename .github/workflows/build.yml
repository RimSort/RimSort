name: Build
on:
  workflow_call:
    inputs:
      version_format:
        description: "Versioning format"
        required: false
        type: string
        default: "v${major}.${minor}.${patch}"
      attest:
        description: "Generate attestations"
        required: false
        type: boolean
        default: true
  # checkov:skip=CKV_GHA_7
  workflow_dispatch:
    inputs:
      version_format:
        description: "Versioning format"
        required: false
        type: string
        default: "v${major}.${minor}.${patch}"
      attest:
        description: "Generate attestations"
        required: false
        type: boolean
        default: true

permissions: {}

jobs:
  build:
    permissions:
      id-token: write
      contents: read
      attestations: write
      packages: write

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            platform: "Darwin"
            arch: "i386"
            env:
              BUILD_OUTPUT: "__main__.app"
              Executable: RimSort
          - os: macos-latest
            platform: "Darwin"
            arch: "arm"
            env:
              BUILD_OUTPUT: "__main__.app"
              Executable: RimSort
          - os: ubuntu-22.04
            platform: "Ubuntu-22.04"
            arch: "x86_64"
            env:
              BUILD_OUTPUT: "__main__.dist"
              Executable: "RimSort"
          - os: ubuntu-24.04
            platform: "Ubuntu-24.04"
            arch: "x86_64"
            env:
              BUILD_OUTPUT: "__main__.dist"
              Executable: RimSort
          - os: windows-latest
            platform: "Windows"
            arch: "x86_64"
            env:
              BUILD_OUTPUT: "__main__.dist"
              Executable: RimSort.exe
    steps:
      - name: Check-out repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Add submodules to pythonpath
        id: pythonpath
        run: |
          if [ "${{ matrix.platform }}" == "Windows" ]; then
            echo "PYTHONPATH=$PYTHONPATH;${{ github.workspace }}\submodules\SteamworksPy" >> "$GITHUB_OUTPUT"
          else
            echo "PYTHONPATH=$PYTHONPATH:${{ github.workspace }}/submodules/SteamworksPy" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Remove problematic brew libs
        run: |
          brew remove --force --ignore-dependencies openssl@3
          brew cleanup openssl@3
        if: runner.os == 'macos' && matrix.arch == 'i386'

      - name: Get semantic version
        id: sem_version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          version_format: "${{ inputs.version_format }}"
          change_path: "app libs submodules themes"

      - name: Make (overwrite) version.xml
        id: version_xml
        run: |
          rm -f version.xml
          {
          echo "<version>"
          echo "  <version>${{ steps.sem_version.outputs.version  }}</version>"
          echo "  <major>${{ steps.sem_version.outputs.major }}</major>"
          echo "  <minor>${{ steps.sem_version.outputs.minor }}</minor>"
          echo "  <patch>${{ steps.sem_version.outputs.patch }}</patch>"
          echo "  <increment>${{ steps.sem_version.outputs.increment }}</increment>"
          echo "  <commit>${{ steps.sem_version.outputs.current_commit   }}</commit>"
          echo "  <tag>${{ steps.sem_version.outputs.version_tag  }}</tag>"
          echo "</version>"
          } >> version.xml
        shell: bash

      - name: Setup Python
        uses: actions/setup-python@main
        with:
          python-version-file: "pyproject.toml"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Install Dependencies
        shell: bash
        run: uv sync --locked --no-dev --group build

      - name: Build Actions
        shell: bash
        run: |
          set -e
          uv run --frozen python \
          ./distribute.py \
          --product-version='${{ steps.sem_version.outputs.major }}.
            ${{ steps.sem_version.outputs.minor }}.
            ${{ steps.sem_version.outputs.patch }}.
            ${{ steps.sem_version.outputs.increment }}' \
          --skip-build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: Nuitka/Nuitka-Action@main
        if: true
        with:
          nuitka-version: main
          script-name: app/__main__.py
          mode: ${{ runner.os == 'macos' && 'app' || 'standalone' }}
          static-libpython: auto
          product-version: >-
            ${{ steps.sem_version.outputs.major }}.
            ${{ steps.sem_version.outputs.minor }}.
            ${{ steps.sem_version.outputs.patch }}.
            ${{ steps.sem_version.outputs.increment }}
          file-description: "RimSort"
          include-data-files: |
            version.xml=version.xml
        env:
          PYTHONPATH: ${{ steps.pythonpath.outputs.PYTHONPATH }}

      - name: Set FILENAME
        id: filename
        run: |
          FILENAME="${{ matrix.platform }}_"
          FILENAME+="${{ matrix.arch }}"
          echo "FILENAME=$FILENAME" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Find Executable
        id: find_executable
        run: |
          executable=$(find . -name "${{ matrix.env.Executable }}" | head -n 1)
          echo "EXECUTABLE=$executable" >> "$GITHUB_OUTPUT"
          echo "Executable found at $executable"
        shell: bash

      - name: Create MSI Package
        if: matrix.platform == 'Windows'
        run: |
          choco install wixtoolset -y

          $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"

          heat.exe dir "build\\__main__.dist" -cg MainDist -dr INSTALLFOLDER -gg -sfrag -sreg -srd -var var.DistDir -out maindist.wxs

          $wixContent = @"
          <?xml version="1.0" encoding="UTF-8"?>
          <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
            <Product Id="*" 
                     Name="RimSort" 
                     Language="1033" 
                     Version="${{ steps.sem_version.outputs.major }}.${{ steps.sem_version.outputs.minor }}.${{ steps.sem_version.outputs.patch }}.${{ steps.sem_version.outputs.increment }}" 
                     Manufacturer="RimSort Team" 
                     UpgradeCode="d4f7c3b9-8a5e-4e52-bb9f-3c2d1f7a9e24">
              <Package InstallerVersion="400" Compressed="yes" InstallScope="perMachine" />
              <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />
              <MediaTemplate EmbedCab="yes" />

              <Property Id="DistDir" Value="build\\__main__.dist" />

              <Property Id="INSTALLFOLDER">
                <RegistrySearch Id="PreviousInstallDirSearch" Root="HKCU" Key="Software\RimSort" Name="InstallDir" Type="raw" />
              </Property>

              <CustomAction Id="SetDefaultInstallDir" Script="vbscript" Execute="immediate">
                <![CDATA[
                  Dim fso, installDir
                  Set fso = CreateObject("Scripting.FileSystemObject")
                  
                  installDir = Session.Property("INSTALLFOLDER")
                  
                  If installDir = "" Then
                    If fso.DriveExists("D:\") Then
                      installDir = "D:\Program Files\RimSort"
                    Else
                      installDir = "C:\Program Files\RimSort"
                    End If
                    Session.Property("INSTALLFOLDER") = installDir
                  End If
                ]]>
              </CustomAction>

              <Icon Id="RimSortIcon" SourceFile="themes\\default-icons\\AppIcon.ico" />

              <Directory Id="TARGETDIR" Name="SourceDir">
                <Directory Id="ProgramFilesFolder">
                  <Directory Id="INSTALLFOLDER" Name="RimSort" />
                </Directory>
                <Directory Id="ProgramMenuFolder">
                  <Directory Id="ApplicationProgramsFolder" Name="RimSort"/>
                </Directory>
              </Directory>

              <Feature Id="ProductFeature" Title="RimSort" Level="1">
                <ComponentGroupRef Id="MainDist" />
                <ComponentGroupRef Id="ShortcutComponents" />
                <ComponentGroupRef Id="RegistryComponents" />
              </Feature>

              <UIRef Id="WixUI_InstallDir" />

              <Property Id="WIXUI_INSTALLDIR" Value="INSTALLFOLDER" />

              <InstallExecuteSequence>
                <Custom Action="SetDefaultInstallDir" After="ValidateProductID">NOT Installed</Custom>
              </InstallExecuteSequence>

              <InstallUISequence>
                <Custom Action="SetDefaultInstallDir" After="ValidateProductID">NOT Installed</Custom>
              </InstallUISequence>

              <ComponentGroup Id="ShortcutComponents" Directory="ApplicationProgramsFolder">
                <Component Id="StartMenuShortcut" Guid="3C5F5459-99AE-5A3E-0422-E64DA66B4443">
                  <RegistryValue Root="HKCU"
                                Key="Software\RimSort"
                                Name="StartMenuShortcutInstalled"
                                Type="integer"
                                Value="1"
                                KeyPath="yes" />
                  <Shortcut Id="ApplicationStartMenuShortcut"
                            Directory="ApplicationProgramsFolder"
                            Name="RimSort"
                            Target="[INSTALLFOLDER]RimSort.exe"
                            WorkingDirectory="INSTALLFOLDER"
                            Icon="RimSortIcon"
                            IconIndex="0"
                            Advertise="no" />
                  <RemoveFolder Id="RemoveApplicationProgramsFolder"
                                Directory="ApplicationProgramsFolder"
                                On="uninstall" />
                </Component>
              </ComponentGroup>

              <ComponentGroup Id="RegistryComponents" Directory="INSTALLFOLDER">
                <Component Id="InstallFlagRegistry" Guid="92D579F1-DC10-4E2F-87F5-25B36476C271">
                  <RegistryValue Root="HKCU"
                                Key="Software\RimSort\StartMenu"
                                Name="installed"
                                Type="integer"
                                Value="1"
                                KeyPath="yes" />
                </Component>
                <Component Id="InstallPathRegistry" Guid="A1B2C3D4-E5F6-7890-ABCD-EF1234567890">
                  <RegistryValue Root="HKCU"
                                Key="Software\RimSort"
                                Name="InstallDir"
                                Type="string"
                                Value="[INSTALLFOLDER]"
                                KeyPath="yes" />
                </Component>
              </ComponentGroup>
            </Product>
          </Wix>
          "@
          $wixContent | Out-File -FilePath "RimSort.wxs" -Encoding UTF8

          candle.exe `
            -dDistDir="build\\__main__.dist" `
            maindist.wxs RimSort.wxs

          light.exe `
            -ext WixUIExtension `
            -cultures:en-us `
            maindist.wixobj RimSort.wixobj `
            -o "RimSort-${{ steps.sem_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.msi"
        shell: powershell

      - name: Generate executable attestations
        uses: actions/attest-build-provenance@v2.4.0
        if: ${{ inputs.attest }}
        with:
          subject-path: ${{ steps.find_executable.outputs.EXECUTABLE }}

      - name: Generate MSI attestation
        uses: actions/attest-build-provenance@v2.4.0
        if: ${{ inputs.attest && matrix.platform == 'Windows' }}
        with:
          subject-path: ./RimSort-${{ steps.sem_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.msi

      - name: Rename new build
        run: |
          cd build
          mv "${{ matrix.env.BUILD_OUTPUT }}" "output"
          tar -cvf "${{ steps.filename.outputs.FILENAME }}.tar" "output" 
          rm -rf "output"
        shell: bash

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2.4.0
        if: ${{ inputs.attest }}
        with:
          subject-path: ./build/${{ steps.filename.outputs.FILENAME }}.tar

        # Upload folder as artifact
      - name: Upload folder as artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ steps.filename.outputs.FILENAME }}
          path: ./build/${{ steps.filename.outputs.FILENAME }}.tar
          if-no-files-found: error

      # Upload the built executable
      - name: Upload MSI Package
        if: matrix.platform == 'Windows'
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.platform }}_${{ matrix.arch }}_msi
          path: ./RimSort-${{ steps.sem_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.msi
          if-no-files-found: error

    outputs:
      filename: ${{ steps.filename.outputs.FILENAME }}

  post-build-test:
    needs: build
    uses: ./.github/workflows/test_builds.yml
