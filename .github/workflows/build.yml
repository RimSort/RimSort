name: Build
on:
  workflow_call: null
  workflow_dispatch: null

permissions: {}

jobs:
  build:
    permissions:
      id-token: write
      contents: read

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            platform: "Darwin"
            arch: "i386"
            env: 
              BUILD_OUTPUT: "__main__.app"
          - os: macos-latest
            platform: "Darwin"
            arch: "arm"
            env: 
              BUILD_OUTPUT: "__main__.app"
          - os: ubuntu-latest
            platform: "Linux"
            arch: "x86_64"
            env: 
              BUILD_OUTPUT: "__main__.dist"
          - os: windows-latest
            platform: "Windows"
            arch: "x86_64"
            env: 
              BUILD_OUTPUT: "__main__.dist"
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Clean build directory
        run: rm -rf ./build
        shell: bash

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64" # optional x64 or x86. Defaults to x64 if not specified
          cache: "pip"
          cache-dependency-path: |
            **/requirements*.txt
      
      - name: Install Dependencies
        run: pip install -r requirements.txt -r requirements_develop.txt

      - name: Setup Environment Variables
        id: env
        shell: bash
        run: |
          echo "NUITKA_CACHE_DIR=${{ github.action_path }}/nuitka/cache" >> $GITHUB_OUTPUT
          echo "PYTHON_VERSION=$(python --version | awk '{print $2}' | cut -d '.' -f 1,2)" >> $GITHUB_OUTPUT

      - name: Cache build files
        uses: actions/cache@v2
        with:
          path: ${{ steps.env.outputs.NUITKA_CACHE_DIR }}
          key: ${{ runner.os }}_${{ matrix.platform }}_${{ matrix.arch }}-python-${{ steps.env.outputs.PYTHON_VERSION }}-nuitka-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}_${{ matrix.platform }}_${{ matrix.arch }}-python-${{ steps.env.outputs.PYTHON_VERSION }}-
            ${{ runner.os }}_${{ matrix.platform }}_${{ matrix.arch }}-python-
            ${{ runner.os }}_${{ matrix.platform }}_${{ matrix.arch }}-

      - name: Build
        shell: bash
        run: |
          set -e
          python distribute.py --skip-deps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set FILENAME
        id: filename
        run: |
          FILENAME="${{ matrix.platform }}_"
          FILENAME+="${{ matrix.arch }}"
          echo "FILENAME=$FILENAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Rename new build
        run: |
          rm -rf ./build/"${{ steps.filename.outputs.FILENAME }}"
          mv "./build/${{ matrix.env.BUILD_OUTPUT }}" "./build/${{ steps.filename.outputs.FILENAME }}"
        shell: bash

        # Upload folder as artifact
      - name: Upload folder as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.filename.outputs.FILENAME }}
          path: ./build/${{ steps.filename.outputs.FILENAME }}
          if-no-files-found: error
    outputs:
      filename: ${{ steps.filename.outputs.FILENAME }}
