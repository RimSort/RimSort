name: Build and Release
on:
  # checkov:skip=CKV_GHA_7
  workflow_dispatch:
    inputs:
      type:
        description: "Release type"
        required: true
        type: choice
        options:
          - "Stable"
          - "Edge"
      draft:
        description: "Draft release"
        type: boolean
        default: true
      skip_build:
        description: "Skip build step"
        type: boolean
        default: false
      run_id:
        description: "Run ID to grab artifacts from if skipping build"
        type: number
        required: false
      update_release:
        description: "(Danger!) Allow updating non-draft stable release"
        type: boolean
        default: false
        required: false
      omit_name_during_update:
        description: "Don't override name if updating"
        type: boolean
        default: true
        required: false
      omit_body_during_update:
        description: "Don't override body if updating"
        type: boolean
        default: true
        required: false

permissions: {}

jobs:
  pre-build:
    runs-on: ubuntu-latest
    steps:
      - name: Determine version format
        id: version_format
        run: |
          if [[ "${{ github.event.inputs.type }}" == "Stable" ]]; then
            v_format="v\${major}.\${minor}.\${patch}"
            prerelease=false
          elif [[ "${{ github.event.inputs.type }}" == "Edge" ]]; then
            v_format="v\${major}.\${minor}.\${patch}-edge\${increment}"
            prerelease=true
          else
            echo "Unknown type: ${{ github.event.inputs.type }}"
            exit 1
          fi
          echo "version_format=$v_format" >> "$GITHUB_OUTPUT"
          echo "prerelease=$prerelease" >> "$GITHUB_OUTPUT"
        shell: bash
    outputs:
      version_format: ${{ steps.version_format.outputs.version_format }}
      prerelease: ${{ steps.version_format.outputs.prerelease }}

  build:
    needs: pre-build
    if: inputs.skip_build != true
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/build.yml
    with:
      version_format: ${{ needs.pre-build.outputs.version_format }}

  release:
    permissions:
      contents: write
      packages: read
      statuses: write
    needs: [build, pre-build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Build or Skip
        if: ${{ needs.build.result == 'failure'  || needs.pre-build.result == 'failure'}}
        run: exit 1
        shell: bash

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get semantic version
        id: sem_version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          version_format: "${{ needs.pre-build.outputs.version_format }}"
          change_path: "app libs submodules themes"

      - name: Get short Sha
        id: short_sha
        run: |
          short_sha=$(echo "${{ steps.sem_version.outputs.current_commit }}" | cut -c1-7)
          echo "short_sha=$short_sha" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Get version string
        id: version
        run: |
          if [[ "${{ github.event.inputs.type }}" == "Edge" ]]; then
          version="${{steps.sem_version.outputs.version}}+${{steps.short_sha.outputs.short_sha}}"
          else
          version="${{steps.sem_version.outputs.version}}"
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.event.inputs.type }}" == "Stable" ]]; then
            tag="${{steps.version.outputs.version}}"
          elif [[ "${{ github.event.inputs.type }}" == "Edge" ]]; then
            tag="Edge"
          else
            echo "Unknown type: ${{ github.event.inputs.type }}"
            exit 1
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Download artifacts - Current Flow
        if: ${{ inputs.skip_build == false }}
        uses: actions/download-artifact@v4.1.7
        with:
          path: artifacts

      - name: Download artifacts - Previous Flow
        if: ${{ inputs.skip_build == true}}
        uses: actions/download-artifact@v4.1.7
        with:
          path: artifacts
          run-id: ${{ github.event.inputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename artifacts and zip to versioned file
        id: artifacts
        run: |
          cd artifacts
          for artifact in ./*; do
            file=${artifact##*/} 
            base="${file%%.*}"
            name=RimSort-${{ steps.version.outputs.version }}-$base.zip
            rootname=RimSort
            if [[ $name == *"Darwin"* ]]; then
              rootname=RimSort.app
            fi
            echo "Zipping $artifact to $name"
            cd "$artifact"
            tar -xvf "${file}.tar"
            mv "output" "$rootname"
            zip -rmqq "../$name" "$rootname" &
            cd ..
          done
          echo "Waiting for zips to finish"
          wait
          echo "Cleaning up - Removing non-zip files"
          shopt -s extglob
          rm -rf !(*.zip)
        shell: bash

      - name: Create body
        id: body
        run: |
          ACTION_RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          message="${{ github.event.inputs.type }} release ${{steps.version.outputs.version}}.
          The latest commit is ${{ steps.sem_version.outputs.current_commit }}.

          Refer to the [action run]($ACTION_RUN_URL) that created this release."
          echo "body<<EOF"$'\n'"$message"$'\n'EOF >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Delete Previous Edge Release and Tag
        if: ${{ github.event.inputs.type == 'Edge' }}
        run: |
          gh release delete Edge -y --cleanup-tag || echo "No previous release with tag Edge found"
          git tag -d Edge || echo "Edge tag doesn't exist locally"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: ncipollo/release-action@v1.14.0
        id: release
        with:
          artifacts: artifacts/*
          tag: ${{ steps.tag.outputs.tag }}
          generateReleaseNotes: true
          prerelease: ${{ needs.pre-build.outputs.prerelease }}
          draft: ${{ github.event.inputs.draft }}
          body: ${{ steps.body.outputs.body }}
          allowUpdates: true
          updateOnlyUnreleased: ${{ !inputs.update_release }}
          omitNameDuringUpdate: ${{ inputs.omit_name_during_update }}
          omitBodyDuringUpdate: ${{ inputs.omit_body_during_update }}
          removeArtifacts: true
          commit: ${{ steps.sem_version.outputs.current_commit }}

      - name: Echo Release URL
        run: |
          echo "Release URL: ${{ steps.release.outputs.html_url }}"
        shell: bash
