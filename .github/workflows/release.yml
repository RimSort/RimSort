name: Build and Release
on:
  workflow_dispatch:
    inputs:
      type:
        description: "Release type"
        required: true
        type: choice
        options:
          - "Stable"
          - "Edge"
      draft:
        description: "Only create a draft release"
        type: boolean
        default: true
      skip_build:
        description: "Skip the build step (For debugging)"
        type: boolean
        default: false
      run_id:
        description: "Run ID to use if skipping build (For debugging)"
        type: number
        required: false

permissions: {}

jobs:
  build:
    if: ${{ github.event.inputs.skip_build != true }}
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/build.yml

  release:
    permissions:
      contents: write
      packages: read
      statuses: write
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # .patch
      - name: Determine version format
        id: version_format
        run: |
          if [[ "${{ github.event.inputs.type }}" == "Stable" ]]; then
            v_format="${major}.${minor}.${patch}"
            prerelease=false
          elif [[ "${{ github.event.inputs.type }}" == "Edge" ]]; then
            v_format="${major}.${minor}.${patch}-edge${increment}"
            prerelease=true
          else
            echo "Unknown type: ${{ github.event.inputs.type }}"
            exit 1
          fi
          echo "version_format=$v_format" >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get semantic version
        id: sem_version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          enable_prerelease_mode: true
          version_format: "${{ steps.version_format.outputs.version_format }}"
          change_path: "app libs submodules themes"

      - name: Get final version
        id: version
        run: |
          if [[ "${{ github.event.inputs.type }}" == "Edge" ]]; then
          version="${{steps.sem_version.outputs.version}}+${{steps.sem_version.outputs.current_commit}}"
          else
          version="${{steps.sem_version.outputs.version}}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
        shell: bash

      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.event.inputs.type }}" == "Stable" ]]; then
            tag="${{steps.version.outputs.version}}"
          elif [[ "${{ github.event.inputs.type }}" == "Edge" ]]; then
            tag="Edge"
          else
            echo "Unknown type: ${{ github.event.inputs.type }}"
            exit 1
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
        shell: bash

      - name: Download artifacts - Current Flow
        if : ${{ github.event.inputs.skip_build != true }}
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Download artifacts - Previous FLow
        if : ${{ github.event.inputs.skip_build == true }}
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          run-id: ${{ github.event.inputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add version to artifact filenames
        id: artifacts
        run: |
          for artifact in artifacts/*; do
            mv "$artifact" "${RimSort-${{ steps.version.outputs.version }}-$(basename $artifact)}"
          done
        shell: bash

      - name: Create body
        id: body
        run: |
          ACTION_RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          message="This is a ${{ github.event.inputs.type }} release, version ${{steps.version.outputs.version}}.
          The latest commit is ${{ steps.sem_version.outputs.current_commit }}.
          
          Refer to the [action run]($ACTION_RUN_URL) that created this release."
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "body<<EOF"$'\n'"$message"$'\n'EOF >> $GITHUB_OUTPUT
        shell: bash

      - name: Delete last edge release
        if: ${{ github.event.inputs.type == 'Edge' }}
        run: |
          gh release delete Edge --yes || true
        env:
          GITHUB_TOKEN: ${{ github.token}}

      - name: Create Release
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: artifacts/*
          tag: ${{ steps.tag.outputs.tag }}
          generateReleaseNotes: true
          prerelease: ${{ steps.version_format.outputs.prerelease }}
          draft: ${{ github.event.inputs.draft }}
          body: ${{ steps.body.outputs.body }}
