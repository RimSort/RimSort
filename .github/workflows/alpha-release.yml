name: Alpha release (build for all platforms)
on:
  push:
    tags:
      - 'alpha-v*'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            platform: "Linux"
            arch: "x86_64"
          - os: windows-2019
            platform: "Windows"
            arch: "x86_64"
          - os: macos-11
            platform: "Darwin"
            arch: "i386"
    steps:
      # Ubuntu dependencies
      - name: Install Ubuntu system dependencies
        if: matrix.platform == 'Linux'
        run: |
          # Update apt
          sudo apt update
          # Install PySide6 system dependencies
          # https://doc.qt.io/qt-6/linux-requirements.html
          sudo apt install -y \
            gvfs-libs \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libatspi2.0-dev \
            '^libxcb.*-dev'
          # Install Nuitka dependencies
          sudo apt install -y ccache clang patchelf
      # Check-out repository with history
      - name: Checkout code and fetch all tags
        uses: actions/checkout@v3
      # Setup Python
      - name: Setup py39 with dependencies
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          architecture: 'x64'
          cache: 'pip'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # Setup submodules
      - name: Update submodules
        run: git submodule update --init --recursive
      # Execute distribute.py (copy libs, grab latest todds release)
      - name: Execute distribute.py
        run: python distribute.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Build python script into a stand-alone executable
      # MacOS i386
      - name: Nuitka Compilation for MacOS i386
        if: matrix.platform == 'Darwin' && matrix.arch == 'i386'
        uses: Nuitka/Nuitka-Action@main
        with:
          disable-console: true
          enable-plugins: pyside6
          include-data-dir: data=data,todds=todds
          include-data-files: steam_appid.txt=steam_appid.txt,SteamworksPy_i386.dylib=SteamworksPy.dylib,libsteam_api.dylib=libsteam_api.dylib,update.sh=update.sh
          macos-app-icon: data/AppIcon_a.icns
          macos-create-app-bundle: true
          nuitka-version: 1.5.6
          onefile: false
          output-dir: dist
          standalone: true
          script-name: RimSort.py
      # Linux x86_64
      - name: Nuitka Compilation for Linux x86_64
        if: matrix.platform == 'Linux'
        uses: Nuitka/Nuitka-Action@main
        with:
          disable-console: true
          enable-plugins: pyside6
          include-data-dir: data=data,todds=todds
          include-data-files: steam_appid.txt=steam_appid.txt,SteamworksPy_x86_64.so=SteamworksPy.so,libsteam_api.so=libsteam_api.so,update.sh=update.sh
          nuitka-version: 1.5.6
          onefile: false
          output-dir: dist
          standalone: true
          script-name: RimSort.py
      # Windows
      - name: Nuitka Compilation for Windows
        if: matrix.platform == 'Windows'
        uses: Nuitka/Nuitka-Action@main
        with:
          disable-console: true
          enable-plugins: pyside6
          include-data-dir: data=data,todds=todds
          include-data-files: steam_appid.txt=steam_appid.txt,SteamworksPy64.dll=SteamworksPy64.dll,steam_api64.dll=steam_api64.dll,update.bat=update.bat
          nuitka-version: 1.5.6
          onefile: false
          output-dir: dist
          standalone: true
          script-name: RimSort.py
          windows-icon-from-ico: data/AppIcon_a.png
      # Format tag name, filename
      - name: Format filename
        run: |
          # Extract the tag name, set in env for output
          RAW_TAG_NAME=$(echo "${{ github.ref }}" | sed 's#refs/tags/##')
          echo "RAW_TAG_NAME=$RAW_TAG_NAME" >> $GITHUB_ENV
          # Format the tag name, set in env for output
          FORMATTED_TAG_NAME=$(echo $RAW_TAG_NAME | sed 's/alpha/Alpha/')
          echo "FORMATTED_TAG_NAME=$FORMATTED_TAG_NAME" >> $GITHUB_ENV
          # Format the filename, set in env for output
          FILENAME="RimSort-${FORMATTED_TAG_NAME}_${{ matrix.platform }}_${{ matrix.arch }}.zip"
          echo "FILENAME=$FILENAME" >> $GITHUB_ENV
        shell: bash
      # Create ZIP archive of release
      - name: Create ZIP (Darwin)
        if: matrix.platform == 'Darwin'
        run: |
          cd ./dist/
          zip -r ${{ env.FILENAME }} RimSort.app
      - name: Create ZIP (Linux)
        if: matrix.platform == 'Linux'
        run: |
          cd ./dist/
          cp -r RimSort.dist RimSort
          zip -r ${{ env.FILENAME }} RimSort
      - name: Create ZIP (Windows)
        if: matrix.platform == 'Windows'
        run: |
          cd ./dist/
          Rename-Item -Path RimSort.dist -NewName RimSort
          Compress-Archive -Path RimSort -DestinationPath ${{ env.FILENAME }}
        shell: powershell
      # Upload ZIP as artifact
      - name: Upload ZIP as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.FILENAME }}
          path: ./dist/${{ env.FILENAME }}
    outputs:
      formatted_tag_name: ${{ env.FORMATTED_TAG_NAME }}
      raw_tag_name: ${{ env.RAW_TAG_NAME }}
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Check-out repository
      - name: Checkout tag and fetch history
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      # Authenticate gh
      - name: Authenticate gh
        run: gh auth login --with-token <<< "${{ secrets.TWSTA_ACTIONS }}"
      # Get second to latest tag (excluding Edge)
      - name: Get second-to-latest tag
        run: |
          LAST_TAG=$(git tag --sort=-creatordate | grep -v '^Edge$' | tail -n 2 | head -n 1)
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
      # Generate Changelog
      - name: Generate Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v2
        with:
          commitMode: "true"
          fromTag: ${{ env.LAST_TAG }}
          ignorePreReleases: "true"
          toTag: ${{ needs.build.outputs.raw_tag_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
      # Create Alpha release
      - name: Handle the Alpha Release
        run: |
            # Check if the tag has already been released
            OUTPUT=$(gh release view "${{ needs.build.outputs.raw_tag_name }}" 2>&1) || true
            if [[ $OUTPUT != *"release not found"* ]]; then
              echo "Release already exists. Replacing it."
              gh release delete "${{ needs.build.outputs.raw_tag_name }}" --yes
            fi
            FORMATTED_TITLE_TAG_NAME=$(echo $FORMATTED_TAG_NAME | sed 's/Alpha-v/Alpha /')
            gh release create \
            "${{ needs.build.outputs.raw_tag_name }}" \
            --title "RimSort ${{ needs.build.outputs.formatted_tag_name }}" \
            --notes "${{ steps.changelog.outputs.changelog }}"
        env:
          GITHUB_TOKEN: ${{ secrets.TWSTA_ACTIONS }}
      # Download artifacts
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v2
      # Upload each artifact
      - name: Upload artifacts to release
        run: |
          for artifact_dir in RimSort-Alpha*; do
            artifact="$artifact_dir/$artifact_dir"
            if [[ -f "$artifact" ]]; then
              echo "Uploading artifact $artifact..."
              gh release upload "${{ needs.build.outputs.raw_tag_name }}" "$artifact"
            else
              echo "Warning: Expected artifact file not found: $artifact"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.TWSTA_ACTIONS }}
